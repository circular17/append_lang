// @generated by Peggy 4.0.2.
//
// https://peggyjs.org/

import * as tree from "../tree.mjs";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { module: peg$parsemodule };
  var peg$startRuleFunction = peg$parsemodule;

  var peg$c0 = ".";
  var peg$c1 = " ";
  var peg$c2 = "use";
  var peg$c3 = ",";
  var peg$c4 = "`";
  var peg$c5 = "let";
  var peg$c6 = ";";
  var peg$c7 = "=";
  var peg$c8 = "var";
  var peg$c9 = "(";
  var peg$c10 = ")";
  var peg$c11 = "{|";
  var peg$c12 = "|}";
  var peg$c13 = "type";
  var peg$c14 = "trait";
  var peg$c15 = "alias";
  var peg$c16 = "{";
  var peg$c17 = "}";
  var peg$c18 = "...";
  var peg$c19 = "-";
  var peg$c20 = "do";
  var peg$c21 = "end";
  var peg$c22 = "when";
  var peg$c23 = "\"";
  var peg$c24 = "->";
  var peg$c25 = "with";
  var peg$c26 = "global";
  var peg$c27 = "async";
  var peg$c28 = "mut";
  var peg$c29 = "fun";
  var peg$c30 = "sub";
  var peg$c31 = "enum";
  var peg$c32 = "state";
  var peg$c33 = "=>";
  var peg$c34 = "?";
  var peg$c35 = "return";
  var peg$c36 = "yield";
  var peg$c37 = "in";
  var peg$c38 = "resume";
  var peg$c39 = "next";
  var peg$c40 = "break";
  var peg$c41 = "while";
  var peg$c42 = "repeat";
  var peg$c43 = "each";
  var peg$c44 = "@";
  var peg$c45 = "wise";
  var peg$c46 = "else";
  var peg$c47 = "!=";
  var peg$c48 = "-->";
  var peg$c49 = "::";
  var peg$c50 = ">=";
  var peg$c51 = "<=";
  var peg$c52 = "[";
  var peg$c53 = "]";
  var peg$c54 = "set";
  var peg$c55 = "dict";
  var peg$c56 = "_";
  var peg$c57 = "*";
  var peg$c58 = "&";
  var peg$c59 = "<>";
  var peg$c60 = "#";
  var peg$c61 = ":";
  var peg$c62 = "base";
  var peg$c63 = "const";
  var peg$c64 = "init";
  var peg$c65 = "prop";
  var peg$c66 = "new";
  var peg$c67 = "any";
  var peg$c68 = "\\";
  var peg$c69 = "??";
  var peg$c70 = "or";
  var peg$c71 = "xor";
  var peg$c72 = "<|";
  var peg$c73 = "!";
  var peg$c74 = "defer";
  var peg$c75 = "{-}";
  var peg$c76 = "{+}";
  var peg$c77 = "{&}";
  var peg$c78 = "{*}";
  var peg$c79 = "{^}";
  var peg$c80 = "by";
  var peg$c81 = "$";
  var peg$c82 = "--";
  var peg$c83 = "me";
  var peg$c84 = "yes";
  var peg$c85 = "no";
  var peg$c86 = "/";
  var peg$c87 = "+";
  var peg$c88 = "()";
  var peg$c89 = "//";
  var peg$c90 = "/*";
  var peg$c91 = "*/";
  var peg$c92 = "\r";
  var peg$c93 = "\n";
  var peg$c94 = "|";
  var peg$c95 = ">";
  var peg$c96 = "<";
  var peg$c97 = "++";
  var peg$c98 = "..";
  var peg$c99 = "^";
  var peg$c100 = ">>";
  var peg$c101 = "{=}";
  var peg$c102 = "{!=}";
  var peg$c103 = "{<}";
  var peg$c104 = "{<=}";
  var peg$c105 = "{>}";
  var peg$c106 = "{>=}";
  var peg$c107 = "~";
  var peg$c108 = "..<";
  var peg$c109 = "..=";
  var peg$c110 = "..>=";
  var peg$c111 = "..>";
  var peg$c112 = "+..";
  var peg$c113 = "-..";
  var peg$c114 = "{{";
  var peg$c115 = "}}";
  var peg$c116 = "\"\"";

  var peg$r0 = /^[^`]/;
  var peg$r1 = /^[\-+&*\^]/;
  var peg$r2 = /^[><]/;
  var peg$r3 = /^[_A-Za-z0-9]/;
  var peg$r4 = /^[a-z]/;
  var peg$r5 = /^[A-Za-z]/;
  var peg$r6 = /^[A-Za-z0-9_]/;
  var peg$r7 = /^[0-9]/;
  var peg$r8 = /^[0-9_]/;
  var peg$r9 = /^[eE]/;
  var peg$r10 = /^[+\-]/;
  var peg$r11 = /^[ \t]/;
  var peg$r12 = /^[ \t\r\n]/;
  var peg$r13 = /^[^\r\n]/;
  var peg$r14 = /^[=:]/;
  var peg$r15 = /^[_a-zA-Z0-9]/;
  var peg$r16 = /^[>=<|]/;
  var peg$r17 = /^[>=<]/;
  var peg$r18 = /^[=>]/;
  var peg$r19 = /^[%*\/]/;
  var peg$r20 = /^[^"{}]/;

  var peg$e0 = peg$literalExpectation(".", false);
  var peg$e1 = peg$literalExpectation(" ", false);
  var peg$e2 = peg$literalExpectation("use", false);
  var peg$e3 = peg$literalExpectation(",", false);
  var peg$e4 = peg$literalExpectation("`", false);
  var peg$e5 = peg$classExpectation(["`"], true, false);
  var peg$e6 = peg$literalExpectation("let", false);
  var peg$e7 = peg$literalExpectation(";", false);
  var peg$e8 = peg$literalExpectation("=", false);
  var peg$e9 = peg$literalExpectation("var", false);
  var peg$e10 = peg$literalExpectation("(", false);
  var peg$e11 = peg$literalExpectation(")", false);
  var peg$e12 = peg$literalExpectation("{|", false);
  var peg$e13 = peg$literalExpectation("|}", false);
  var peg$e14 = peg$literalExpectation("type", false);
  var peg$e15 = peg$literalExpectation("trait", false);
  var peg$e16 = peg$literalExpectation("alias", false);
  var peg$e17 = peg$literalExpectation("{", false);
  var peg$e18 = peg$literalExpectation("}", false);
  var peg$e19 = peg$literalExpectation("...", false);
  var peg$e20 = peg$literalExpectation("-", false);
  var peg$e21 = peg$literalExpectation("do", false);
  var peg$e22 = peg$literalExpectation("end", false);
  var peg$e23 = peg$literalExpectation("when", false);
  var peg$e24 = peg$literalExpectation("\"", false);
  var peg$e25 = peg$literalExpectation("->", false);
  var peg$e26 = peg$literalExpectation("with", false);
  var peg$e27 = peg$literalExpectation("global", false);
  var peg$e28 = peg$literalExpectation("async", false);
  var peg$e29 = peg$literalExpectation("mut", false);
  var peg$e30 = peg$literalExpectation("fun", false);
  var peg$e31 = peg$literalExpectation("sub", false);
  var peg$e32 = peg$literalExpectation("enum", false);
  var peg$e33 = peg$literalExpectation("state", false);
  var peg$e34 = peg$literalExpectation("=>", false);
  var peg$e35 = peg$literalExpectation("?", false);
  var peg$e36 = peg$literalExpectation("return", false);
  var peg$e37 = peg$literalExpectation("yield", false);
  var peg$e38 = peg$literalExpectation("in", false);
  var peg$e39 = peg$literalExpectation("resume", false);
  var peg$e40 = peg$literalExpectation("next", false);
  var peg$e41 = peg$literalExpectation("break", false);
  var peg$e42 = peg$literalExpectation("while", false);
  var peg$e43 = peg$literalExpectation("repeat", false);
  var peg$e44 = peg$literalExpectation("each", false);
  var peg$e45 = peg$literalExpectation("@", false);
  var peg$e46 = peg$literalExpectation("wise", false);
  var peg$e47 = peg$literalExpectation("else", false);
  var peg$e48 = peg$classExpectation(["-", "+", "&", "*", "^"], false, false);
  var peg$e49 = peg$classExpectation([">", "<"], false, false);
  var peg$e50 = peg$literalExpectation("!=", false);
  var peg$e51 = peg$literalExpectation("-->", false);
  var peg$e52 = peg$literalExpectation("::", false);
  var peg$e53 = peg$literalExpectation(">=", false);
  var peg$e54 = peg$literalExpectation("<=", false);
  var peg$e55 = peg$literalExpectation("[", false);
  var peg$e56 = peg$literalExpectation("]", false);
  var peg$e57 = peg$literalExpectation("set", false);
  var peg$e58 = peg$literalExpectation("dict", false);
  var peg$e59 = peg$literalExpectation("_", false);
  var peg$e60 = peg$literalExpectation("*", false);
  var peg$e61 = peg$literalExpectation("&", false);
  var peg$e62 = peg$literalExpectation("<>", false);
  var peg$e63 = peg$literalExpectation("#", false);
  var peg$e64 = peg$literalExpectation(":", false);
  var peg$e65 = peg$literalExpectation("base", false);
  var peg$e66 = peg$literalExpectation("const", false);
  var peg$e67 = peg$literalExpectation("init", false);
  var peg$e68 = peg$literalExpectation("prop", false);
  var peg$e69 = peg$literalExpectation("new", false);
  var peg$e70 = peg$literalExpectation("any", false);
  var peg$e71 = peg$literalExpectation("\\", false);
  var peg$e72 = peg$literalExpectation("??", false);
  var peg$e73 = peg$literalExpectation("or", false);
  var peg$e74 = peg$literalExpectation("xor", false);
  var peg$e75 = peg$literalExpectation("<|", false);
  var peg$e76 = peg$literalExpectation("!", false);
  var peg$e77 = peg$literalExpectation("defer", false);
  var peg$e78 = peg$classExpectation(["_", ["A", "Z"], ["a", "z"], ["0", "9"]], false, false);
  var peg$e79 = peg$literalExpectation("{-}", false);
  var peg$e80 = peg$literalExpectation("{+}", false);
  var peg$e81 = peg$literalExpectation("{&}", false);
  var peg$e82 = peg$literalExpectation("{*}", false);
  var peg$e83 = peg$literalExpectation("{^}", false);
  var peg$e84 = peg$literalExpectation("by", false);
  var peg$e85 = peg$literalExpectation("$", false);
  var peg$e86 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e87 = peg$literalExpectation("--", false);
  var peg$e88 = peg$literalExpectation("me", false);
  var peg$e89 = peg$literalExpectation("yes", false);
  var peg$e90 = peg$literalExpectation("no", false);
  var peg$e91 = peg$literalExpectation("/", false);
  var peg$e92 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
  var peg$e93 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e94 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e95 = peg$classExpectation([["0", "9"], "_"], false, false);
  var peg$e96 = peg$classExpectation(["e", "E"], false, false);
  var peg$e97 = peg$literalExpectation("+", false);
  var peg$e98 = peg$classExpectation(["+", "-"], false, false);
  var peg$e99 = peg$literalExpectation("()", false);
  var peg$e100 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e101 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false);
  var peg$e102 = peg$literalExpectation("//", false);
  var peg$e103 = peg$classExpectation(["\r", "\n"], true, false);
  var peg$e104 = peg$literalExpectation("/*", false);
  var peg$e105 = peg$literalExpectation("*/", false);
  var peg$e106 = peg$anyExpectation();
  var peg$e107 = peg$literalExpectation("\r", false);
  var peg$e108 = peg$literalExpectation("\n", false);
  var peg$e109 = peg$classExpectation(["=", ":"], false, false);
  var peg$e110 = peg$literalExpectation("|", false);
  var peg$e111 = peg$literalExpectation(">", false);
  var peg$e112 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e113 = peg$literalExpectation("<", false);
  var peg$e114 = peg$classExpectation([">", "=", "<", "|"], false, false);
  var peg$e115 = peg$classExpectation([">", "=", "<"], false, false);
  var peg$e116 = peg$literalExpectation("++", false);
  var peg$e117 = peg$classExpectation(["=", ">"], false, false);
  var peg$e118 = peg$literalExpectation("..", false);
  var peg$e119 = peg$classExpectation(["%", "*", "/"], false, false);
  var peg$e120 = peg$literalExpectation("^", false);
  var peg$e121 = peg$literalExpectation(">>", false);
  var peg$e122 = peg$literalExpectation("{=}", false);
  var peg$e123 = peg$literalExpectation("{!=}", false);
  var peg$e124 = peg$literalExpectation("{<}", false);
  var peg$e125 = peg$literalExpectation("{<=}", false);
  var peg$e126 = peg$literalExpectation("{>}", false);
  var peg$e127 = peg$literalExpectation("{>=}", false);
  var peg$e128 = peg$literalExpectation("~", false);
  var peg$e129 = peg$literalExpectation("..<", false);
  var peg$e130 = peg$literalExpectation("..=", false);
  var peg$e131 = peg$literalExpectation("..>=", false);
  var peg$e132 = peg$literalExpectation("..>", false);
  var peg$e133 = peg$literalExpectation("+..", false);
  var peg$e134 = peg$literalExpectation("-..", false);
  var peg$e135 = peg$classExpectation(["\"", "{", "}"], true, false);
  var peg$e136 = peg$literalExpectation("{{", false);
  var peg$e137 = peg$literalExpectation("}}", false);
  var peg$e138 = peg$literalExpectation("\"\"", false);

  var peg$f0 = function(s) { return tree.leaf(tree.MODULE, { statements: s }, error) };
  var peg$f1 = function(hd, s) { return s };
  var peg$f2 = function(hd, tl) { return [hd].concat(tl).flat() };
  var peg$f3 = function() { return [] };
  var peg$f4 = function(d) { return d };
  var peg$f5 = function(hd, id) { return id };
  var peg$f6 = function(hd, tl) { return tree.leaf(tree.USE, { modules: [hd].concat(tl) }, error) };
  var peg$f7 = function(code) { return tree.leaf(tree.JS, { code }, error) };
  var peg$f8 = function(hd, d) { return d };
  var peg$f9 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f10 = function(names, type, v) { return tree.leaf(tree.CONST_DEF, { names, type, value: v }, error) };
  var peg$f11 = function(hd, v) { return v };
  var peg$f12 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f13 = function(names, v) { return tree.leaf(tree.VAR_DEF, { names, type: null, value: v }, error) };
  var peg$f14 = function(names, type, v) { return v };
  var peg$f15 = function(names, type, v) { return tree.leaf(tree.VAR_DEF, { names, type, value: v }, error) };
  var peg$f16 = function(i) { return tree.leaf(tree.NAMES, { identifiers: i }, error) };
  var peg$f17 = function(hd, e) { return e };
  var peg$f18 = function(hd, tl) { return tree.leaf(tree.DECONSTRUCT_TUPLE, { elements: [hd].concat(tl) }, error) };
  var peg$f19 = function(hd, e) { return e };
  var peg$f20 = function(hd, tl) { return tree.leaf(tree.DECONSTRUCT_RECORD, { elements: [hd].concat(tl) }, error) };
  var peg$f21 = function(member, e) { return e };
  var peg$f22 = function(member, value) { return tree.leaf(tree.DECONSTRUCT_MEMBER, { member, value }, error) };
  var peg$f23 = function(id) { return tree.leaf(tree.DECONSTRUCT_NAME, { name: id }, error) };
  var peg$f24 = function(t) {
        return [t]
    };
  var peg$f25 = function(t) {
        return [t]
    };
  var peg$f26 = function(hd, t) { return t };
  var peg$f27 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f28 = function(genericParams, name, o) { return o };
  var peg$f29 = function(genericParams, name, alias, features) { return tree.leaf(tree.TRAIT_DEF, {
            name,
            genericParams,
            alias,
            features
        }, error) };
  var peg$f30 = function(hd, c) { return c };
  var peg$f31 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f32 = function() { return [] };
  var peg$f33 = function(type, t) { return t };
  var peg$f34 = function(type, constraint) { return tree.leaf(tree.TRAIT_CONSTRAINT, { type, constraint }, error) };
  var peg$f35 = function(hd, f) { return f };
  var peg$f36 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f37 = function(f) {
        f.body = tree.leaf(tree.ABSTRACT_BODY, {}, error)
        return f
    };
  var peg$f38 = function(p) {
        p.getter = tree.leaf(tree.ABSTRACT_BODY, {}, error)
        return p
    };
  var peg$f39 = function(parent) { return tree.leaf(tree.INHERITANCE, { parent }, error) };
  var peg$f40 = function(genericParams, name, type) { return tree.leaf(tree.TYPE_DEF, {
            name,
            genericParams,
            type
        }, error) };
  var peg$f41 = function(genericParams, name, type) { return tree.leaf(tree.ALIAS_DEF, {
            name,
            genericParams,
            type
        }, error) };
  var peg$f42 = function(i) { return i };
  var peg$f43 = function(effects, s, when) { return tree.leaf(tree.CODE_BLOCK, { statements: s, effects: effects ?? [], when }, error) };
  var peg$f44 = function(c) { return c };
  var peg$f45 = function(f, body) {
        f.body = body
        tree.fixFunction(f, error)
        return f
    };
  var peg$f46 = function(isGlobal, isAsync, purity, kind, genericParams, hd, keywordName, name, p) { return p };
  var peg$f47 = function(isGlobal, isAsync, purity, kind, genericParams, hd, keywordName, name, tl, t) { return t };
  var peg$f48 = function(isGlobal, isAsync, purity, kind, genericParams, hd, keywordName, name, tl, returnType, e) { return e };
  var peg$f49 = function(isGlobal, isAsync, purity, kind, genericParams, hd, keywordName, name, tl, returnType, effects) {
        if (keywordName)
            error(`The keyword '${keywordName}' cannot be used as an identifier`)
        if (!name)
            error("The name of the function is not specified")
        return tree.leaf(tree.FUN_DEF, {
            isGlobal,
            isAsync,
            purity,
            kind,
            name,
            genericParams,
            params: [hd].concat(tl ?? []),
            effects: effects ?? [],
            returnType: returnType ?? (kind === "sub" ? tree.leaf(tree.VOID_TYPE, {}, error): tree.leaf(tree.ANY_TYPE, {}, error))
        }, error)
    };
  var peg$f50 = function() { return true };
  var peg$f51 = function() { return false };
  var peg$f52 = function() { return true };
  var peg$f53 = function() { return false };
  var peg$f54 = function(mut, names, t) { return t };
  var peg$f55 = function(mut, names, type) { return tree.leaf(tree.FUN_PARAM_DEF, {
            names,
            type: type ?? tree.leaf(tree.ANY_TYPE, {}, error),
            mutable: !!mut
        }, error) };
  var peg$f56 = function() { return tree.leaf(tree.FUN_PARAM_DEF, {
            names:[tree.leaf(tree.VOID_VALUE, {}, error)],
            type: tree.leaf(tree.VOID_TYPE, {}, error),
            mutable: false
        }, error) };
  var peg$f57 = function(hd, p) { return p };
  var peg$f58 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f59 = function(p) { return p };
  var peg$f60 = function() { return "pure" };
  var peg$f61 = function(v) { return v };
  var peg$f62 = function() { return tree.leaf(tree.ABSTRACT_BODY, { }, error) };
  var peg$f63 = function(b) { return b };
  var peg$f64 = function(effects, s, when) { return tree.leaf(tree.CODE_BLOCK, { statements: s, effects: effects ?? [], when }, error) };
  var peg$f65 = function(hd, s) { return s };
  var peg$f66 = function(hd, tl) { return [hd].concat(tl).flat() };
  var peg$f67 = function() { return [] };
  var peg$f68 = function(value) { return tree.leaf(tree.RETURN, { value }, error) };
  var peg$f69 = function(enumerator) { return tree.leaf(tree.YIELD_IN, { enumerator }, error) };
  var peg$f70 = function(value) { return tree.leaf(tree.YIELD, { value }, error) };
  var peg$f71 = function() { return tree.leaf(tree.RESUME, { }, error) };
  var peg$f72 = function() { return tree.leaf(tree.NEXT, { }, error) };
  var peg$f73 = function() { return tree.leaf(tree.BREAK, { }, error) };
  var peg$f74 = function(condition, body) { return tree.leaf(tree.WHILE, { condition, body }, error) };
  var peg$f75 = function(body) { return tree.leaf(tree.REPEAT, { body }, error) };
  var peg$f76 = function(value, option) {
        if (option) {
            option.key = value
            return option
        }
        else
            return value
    };
  var peg$f77 = function(variable, body) { return tree.leaf(tree.FOR_EACH, { 
            variable: tree.leaf(tree.VALUE_BY_NAME, { name: variable, namespace: [] }, error), 
            body
        }, error) };
  var peg$f78 = function(body) {
        const variableId = tree.leaf(tree.IDENTIFIER, { name: null }, error)
        const variableName = tree.leaf(tree.NAMES, { identifiers: [variableId] }, error)
        const variableDef = tree.leaf(tree.CONST_DEF, { names: variableName, type: null, value: null }, error)
        body.key = tree.leaf(tree.RESOLVED_VARIABLE, { ref: variableId }, error)
        return tree.leaf(tree.FOR_EACH, { variable: variableDef, body }, error)
    };
  var peg$f79 = function(value, option) {
        if (option) {
            option.key = value
            return option
        }
        else
            return value
    };
  var peg$f80 = function(value, option) {
        if (option) {
            option.key = value
            return option
        }
        else
            return value
    };
  var peg$f81 = function(value, option) {
        if (option) {
            option.key = value
            return option
        }
        else
            return value
    };
  var peg$f82 = function(statements, close) {
        if (!close)
            error("Expecting \")\" to close the 'wise' block")
        return tree.leaf(tree.WISE_BLOCK, {
            statements
        }, error)
    };
  var peg$f83 = function(ifTrue, v) { return v };
  var peg$f84 = function(ifTrue, ifFalse) { return tree.leaf(tree.TERNARY, { ifTrue, ifFalse }, error) };
  var peg$f85 = function(c) { return c };
  var peg$f86 = function(statements) { return tree.leaf(tree.CODE_BLOCK, { statements, effects: [] }, error) };
  var peg$f87 = function(hd, o) { return o };
  var peg$f88 = function(hd, tl, value) { return value };
  var peg$f89 = function(hd, tl, otherValue) {
        var cases = [hd].concat(tl)
        if (otherValue)
            cases.push(tree.leaf(tree.CASE_OPTION, {
                patterns: [tree.leaf(tree.CAPTURE, { name: "_", type: tree.leaf(tree.ANY_TYPE, { }, error) }, error)],
                value: otherValue }, error))
        return tree.leaf(tree.CASE, { cases }, error)
    };
  var peg$f90 = function(hd, p) { return p };
  var peg$f91 = function(hd, tl, value) { return tree.leaf(tree.CASE_OPTION, { patterns: [hd].concat(tl), value }, error) };
  var peg$f92 = function(tag, p) { return p };
  var peg$f93 = function(tag, value) { return tree.leaf(tree.TAGGED_VALUE, {
            tag,
            value: value ?? tree.leaf(tree.VOID_VALUE, { }, error)
        }, error) };
  var peg$f94 = function(head, t) { return t };
  var peg$f95 = function(head, tail) {
        if (tail)
            return tree.leaf(tree.LINKED_LIST, {
                head,
                tail
            }, error)
        else
            return head
    };
  var peg$f96 = function(operator, value) { return tree.leaf(tree.COMPARISON_PATTERN, { operator, value }, error) };
  var peg$f97 = function(startEllipsis, hd, v) { return v };
  var peg$f98 = function(startEllipsis, hd, tl, endEllipsis, close) {
        if (!close) {
            if (tl.length > 0)
                error("Expecting \")\" to close the tuple")
            else
                error("Expecting matching \")\"")
        }
        return tl.length > 0
            ? tree.leaf(tree.TUPLE, { values: [hd].concat(tl), startEllipsis: !!startEllipsis, endEllipsis: !!endEllipsis  }, error)
            : hd
        };
  var peg$f99 = function(ellipsis) { return tree.leaf(tree.REC_VALUE, { members: [], ellipsis: !!ellipsis }, error) };
  var peg$f100 = function(hd, m) { return m };
  var peg$f101 = function(hd, tl, ellipsis, close) {
        if (!close) error("Expecting \"|\x7d\" to close the record")
        return tree.leaf(tree.REC_VALUE, { members: [hd].concat(tl), ellipsis: !!ellipsis }, error)
    };
  var peg$f102 = function(name, value) { return tree.leaf(tree.REC_FIELD_VALUE, { name, value }, error) };
  var peg$f103 = function(ellipsis) { return tree.leaf(tree.LIST, { values: [], startEllipsis: false, endEllipsis: !!ellipsis }, error) };
  var peg$f104 = function(startEllipsis, hd, v) { return v };
  var peg$f105 = function(startEllipsis, hd, tl, endEllipsis, close) {
        if (!close) error("Expecting \"]\" to close the list")
        return tl.length > 0
            ? tree.leaf(tree.LIST, { values: [hd].concat(tl), startEllipsis: !!startEllipsis, endEllipsis: !!endEllipsis }, error)
            : hd
    };
  var peg$f106 = function(ellipsis) { return tree.leaf(tree.SET, { values: [], ellipsis: !!ellipsis }, error) };
  var peg$f107 = function(hd, v) { return v };
  var peg$f108 = function(hd, tl, ellipsis, close) {
        if (!close) error("Expecting \"\x7d\" to close the set")
        return tl.length > 0
            ? tree.leaf(tree.SET, { values: [hd].concat(tl), ellipsis: !!ellipsis }, error)
            : hd
        };
  var peg$f109 = function(ellipsis) { return tree.leaf(tree.DICT_VALUE, { elements: [], ellipsis: !!ellipsis }, error) };
  var peg$f110 = function(hd, m) { return m };
  var peg$f111 = function(hd, tl, ellipsis, close) {
        if (!close) error("Expecting \"\x7d\" to close the dictionary")
        return tree.leaf(tree.DICT_VALUE, { elements: [hd].concat(tl), ellipsis: !!ellipsis }, error)
    };
  var peg$f112 = function(key, value) { return tree.leaf(tree.DICT_KEY_VALUE, { key, value }, error) };
  var peg$f113 = function(id, t) { return t };
  var peg$f114 = function(id, type) { return tree.leaf(tree.CAPTURE, {
            name: id,
            type: type ?? tree.leaf(tree.ANY_TYPE, { }, error)
        }, error) };
  var peg$f115 = function(id) { return tree.leaf(tree.CAPTURE, { name: id, type: tree.leaf(tree.ANY_TYPE, { }, error) }, error) };
  var peg$f116 = function(hd, t) { return t };
  var peg$f117 = function(hd, tl) {
        if (tl.length > 0) {
            const types = [hd].concat(tl)
            if (types.some(t => tree.is(t, tree.VOID_TYPE)))
                error("Void type cannot be in an union")
            return tree.leaf(tree.UNION_TYPE, { types }, error)
        }
        else
            return hd
    };
  var peg$f118 = function(isAsync, purity, kind, params) {
        if (kind == "enum")
            error("Function kind cannot be enum")
        var fixedParams = params ?? [tree.leaf(tree.VOID_TYPE, {}, error)]
        if (kind == "fun" && (fixedParams.length <= 1))
            error("Function need an input and a return type")
        if (kind == "sub")
            fixedParams.push(tree.leaf(tree.VOID_TYPE, {}, error))
        return tree.leaf(tree.FUN_TYPE, {
                isAsync,
                purity,
                kind,
                params: fixedParams.slice(0, fixedParams.length - 1),
                returnType: fixedParams[fixedParams.length - 1]
        }, error)
    };
  var peg$f119 = function(hd, t) { return t };
  var peg$f120 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f121 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.CONCAT_TYPE, { types: [hd].concat(tl) }, error)
            : hd
    };
  var peg$f122 = function(hd, t) { return t };
  var peg$f123 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.TUPLE_TYPE, { types: [hd].concat(tl) }, error)
            : hd };
  var peg$f124 = function(base, i) { return i };
  var peg$f125 = function(base, power) {
        return power
            ? tree.leaf(tree.TUPLE_POWER_TYPE, { base, power }, error)
            : base };
  var peg$f126 = function(base, isOption) {
        return isOption
            ? tree.leaf(tree.OPTION_TYPE, { type: base }, error)
            : base };
  var peg$f127 = function(hd, t) { return t };
  var peg$f128 = function(hd, tl) {
        if (tl.length > 0)
            return tree.leaf(tree.TRAIT_INTER, { traits: [hd].concat(tl) }, error)
        else
            return hd
    };
  var peg$f129 = function(hd, t) { return t };
  var peg$f130 = function(hd, tl) {
        let types = [hd].concat(tl)
        if (types.length > 1)
            return tree.leaf(tree.SPECIALIZE_TYPE, { base: types.pop(), params: types }, error)
        else
            return hd
    };
  var peg$f131 = function(elementType, tail) {
        if (tail)
            return tree.leaf(tree.LINKED_LIST_TYPE, { type: elementType }, error)
        else
            return elementType
    };
  var peg$f132 = function(t) { return t };
  var peg$f133 = function() { error("Unexpected \"#\" in type expression") };
  var peg$f134 = function(elementType) { return tree.leaf(tree.LIST_TYPE, { type: elementType }, error) };
  var peg$f135 = function(elementType) { return tree.leaf(tree.SET_TYPE, { type: elementType }, error) };
  var peg$f136 = function(key, value) { return tree.leaf(tree.DICT_TYPE, { key, value }, error) };
  var peg$f137 = function(hd, m) { return m };
  var peg$f138 = function(hd, tl, close) {
        if (!close)
            error("Expecting \"|\x7d\" to close the record type")
        return tree.leaf(tree.REC_TYPE, {
            members: [hd].concat(tl)
        }, error)
    };
  var peg$f139 = function(parent) { return tree.leaf(tree.INHERITANCE, { parent }, error) };
  var peg$f140 = function(modifier, i) { return i };
  var peg$f141 = function(modifier, names, t) { return t };
  var peg$f142 = function(modifier, names, type, value) { return value };
  var peg$f143 = function(modifier, names, type, defaultValue) {
        if (!type && !defaultValue)
            error("The type or the value of the member must be specified")
        return tree.leaf(tree.REC_FIELD_TYPE, {
            modifier,
            names,
            type: type ?? tree.leaf(tree.ANY_TYPE, {}, error),
            defaultValue
        }, error)
    };
  var peg$f144 = function(modifier, names, defaultValue) { return tree.leaf(tree.REC_FIELD_TYPE, {
            modifier,
            names,
            defaultValue
        }, error) };
  var peg$f145 = function(p, getter, setter) {
        p.getter = getter
        p.setter = setter
        return p
    };
  var peg$f146 = function(s) { return s };
  var peg$f147 = function(purity, name, type) { return tree.leaf(tree.PROP_DEF, {
            purity: purity ?? "pure",
            name,
            type
        }, error) };
  var peg$f148 = function(body) { return body };
  var peg$f149 = function(v) { return v };
  var peg$f150 = function(s) { return tree.leaf(tree.CODE_BLOCK, { statements: s, effects: [] }, error) };
  var peg$f151 = function(isAsync, purity, m) { return m };
  var peg$f152 = function(isAsync, purity, kind, value) { return tree.leaf(tree.FUN_DEF, {
            isAsync,
            purity,
            kind: kind ?? "fun",
            name: null,
            genericParams: [],
            params: tree.getLambdaVariables(value).toSorted().map(name =>
                tree.leaf(tree.FUN_PARAM_DEF, {
                    names: [tree.leaf(tree.IDENTIFIER, { name }, error)],
                    type: tree.leaf(tree.ANY_TYPE, {}, error),
                    mutable: false
                }, error)),
            body: value,
            returnType: kind === "sub" ? tree.leaf(tree.VOID_TYPE, {}, error) : tree.leaf(tree.ANY_TYPE, {}, error)
        }, error) };
  var peg$f153 = function(isAsync, purity, kind, genericParams, params, t) { return t };
  var peg$f154 = function(isAsync, purity, kind, genericParams, params, returnType, body) { return tree.leaf(tree.FUN_DEF, {
             isAsync,
             purity,
             kind: kind === ":" ? "fun" : kind,
             name: null,
             genericParams,
             params: params,
             body: body,
             returnType: returnType ?? (kind === "sub" ? tree.leaf(tree.VOID_TYPE, {}, error) : tree.leaf(tree.ANY_TYPE, {}, error))
         }, error) };
  var peg$f155 = function(isAsync, purity, t) { return t };
  var peg$f156 = function(isAsync, purity, returnType, body) { return tree.leaf(tree.INLINE_ENUM, {
            isAsync,
            purity,
            body: body,
            returnType: returnType ?? tree.leaf(tree.ANY_TYPE, {}, error)
        }, error) };
  var peg$f157 = function(v) { return v };
  var peg$f158 = function(s) { return tree.leaf(tree.CODE_BLOCK, { statements: s, effects: [] }, error) };
  var peg$f159 = function(isAsync, t) { return t };
  var peg$f160 = function(isAsync, returnType, body) { return tree.leaf(tree.FUN_DEF, {
            isAsync,
            kind: "fun",
            name: "new",
            genericParams: [],
            params: [],
            body,
            returnType
        }, error) };
  var peg$f161 = function(s, when) { return tree.leaf(tree.CODE_BLOCK, { statements: s, when }, error) };
  var peg$f162 = function() { return tree.leaf(tree.VOID_TYPE, {}, error) };
  var peg$f163 = function() { return tree.leaf(tree.ANY_TYPE, {}, error) };
  var peg$f164 = function(option, c) { return c };
  var peg$f165 = function(option, pipeCalls) {
        if (pipeCalls.length > 0)
        {
            var result = pipeCalls.pop()
            var current = result
            while (pipeCalls.length > 0)
            {
                var param = pipeCalls.pop()
                current.params.unshift(param)
                current = param
            }
            current.params.unshift(option)
            return result
        }
        else
            return option
    };
  var peg$f166 = function(hd, d) { return d };
  var peg$f167 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.DEFAULT_VALUE, { values: [hd].concat(tl) }, error)
            : hd
    };
  var peg$f168 = function(hd, o) { return o };
  var peg$f169 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.DISJUNCTION, { operands: [hd].concat(tl) }, error)
            : hd
        };
  var peg$f170 = function(hd, o) { return o };
  var peg$f171 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.XOR, { operands: [hd].concat(tl) }, error)
            : hd
        };
  var peg$f172 = function(hd, o) { return o };
  var peg$f173 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.CONJUNCTION, { operands: [hd].concat(tl) }, error)
            : hd
        };
  var peg$f174 = function(firstOperand, otherOperands) {
        return otherOperands.length > 0
            ? tree.leaf(tree.COMPARISON, {
                operands: [tree.leaf(tree.COMPARISON_OPERAND, { operator: null, value: firstOperand }, error)].concat(otherOperands)
            }, error)
            : firstOperand
        };
  var peg$f175 = function(operator, operand) { return tree.leaf(tree.COMPARISON_OPERAND, { operator, value: operand }, error) };
  var peg$f176 = function(firstOperand, otherOperands) {
        return otherOperands.length > 0
            ? tree.leaf(tree.SET_COMPARISON, {
                operands: [tree.leaf(tree.SET_COMPARISON_OPERAND, { operator: null, value: firstOperand }, error)].concat(otherOperands)
            }, error)
            : firstOperand
        };
  var peg$f177 = function(operator, operand) { return tree.leaf(tree.SET_COMPARISON_OPERAND, { operator, value: operand }, error) };
  var peg$f178 = function(head, tl) { return tl };
  var peg$f179 = function(head, tail) {
        if (tail)
            return tree.leaf(tree.LINKED_LIST, { head, tail }, error)
        else
            return head
    };
  var peg$f180 = function(record, hd, c) { return c };
  var peg$f181 = function(record, hd, tl) { return [hd].concat(tl) };
  var peg$f182 = function(record, changes) {
        if (changes)
            return tree.leaf(tree.MODIFY_REC, { record, changes }, error)
        else
            return record
    };
  var peg$f183 = function(name, value) { return tree.leaf(tree.REC_FIELD_VALUE, { name, value }, error) };
  var peg$f184 = function(name) { return tree.leaf(tree.REC_FIELD_VALUE, { name, value: tree.leaf(tree.VOID_VALUE, {}, error) }, error) };
  var peg$f185 = function(hd, other) { return other };
  var peg$f186 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.CONCAT, { operands: [hd].concat(tl) }, error)
            : hd
        };
  var peg$f187 = function(hd, tl) {
        return tl.length > 0 || hd.sign !== "+"
            ? tree.leaf(tree.ADDITION, { terms: [hd].concat(tl) }, error)
            : hd.value
        };
  var peg$f188 = function(sign, term) { return tree.leaf(tree.TERM, { sign:sign ?? "+", value:term }, error) };
  var peg$f189 = function(sign, term) { return tree.leaf(tree.TERM, { sign, value:term }, error) };
  var peg$f190 = function(c) {
        if (tree.is(c, tree.CURRY_PARAM))
            error("Curry parameter cannot be used without call")
        return c
    };
  var peg$f191 = function(left, appendCall) {
        if (appendCall)
        {
            appendCall.params.unshift(left)
            if (appendCall.params.some(p => tree.is(p, tree.CURRY_PARAM)))
                appendCall._ = tree.CURRIED_FUN
            return appendCall
        }
        else
            return left
    };
  var peg$f192 = function(hd, d) { return d };
  var peg$f193 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f194 = function(fun, defer, e) { return e };
  var peg$f195 = function(fun, defer, effects, params) { return tree.leaf(tree.CALL, { fun, defer: !!defer, params: params ?? [], effects: effects ?? [] }, error) };
  var peg$f196 = function(hd, c) { return c };
  var peg$f197 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f198 = function() { return tree.leaf(tree.CURRY_PARAM, { }, error) };
  var peg$f199 = function(hd, t) { return t };
  var peg$f200 = function(hd, tl) {
        if (tl.length > 0)
            return tree.leaf(tree.SET_DIFF, { sets: [hd].concat(tl) }, error)
        else
            return hd
    };
  var peg$f201 = function(hd, t) { return t };
  var peg$f202 = function(hd, tl) {
          if (tl.length > 0)
              return tree.leaf(tree.SET_UNION, { sets: [hd].concat(tl) }, error)
          else
              return hd
      };
  var peg$f203 = function(hd, t) { return t };
  var peg$f204 = function(hd, tl) {
          if (tl.length > 0)
              return tree.leaf(tree.SET_INTER, { sets: [hd].concat(tl) }, error)
          else
              return hd
      };
  var peg$f205 = function(hd, r) { return r };
  var peg$f206 = function(hd, tl) {
        if (tl.length > 0)
            return tree.leaf(tree.CARTESIAN_PROD, { sets: [hd].concat(tl) }, error)
        else
            return hd
    };
  var peg$f207 = function(base, r) { return r };
  var peg$f208 = function(base, power) {
        if (tl.length > 0)
            return tree.leaf(tree.CARTESIAN_POWER, { base, power }, error)
        else
            return hd
    };
  var peg$f209 = function(first, to) {
        if (to)
        {
            to.first = first
            return to
        }
        else
            return first
    };
  var peg$f210 = function(op, lastOrCount, s) { return s };
  var peg$f211 = function(op, lastOrCount, step) { return tree.leaf(tree.RANGE, { lastOrCount, op, step }, error) };
  var peg$f212 = function(hd, tl) {
        return tl.length > 0
            ? tree.leaf(tree.MULTIPLICATION, {
                factors: [tree.leaf(tree.FACTOR, { operator:"*", value:hd }, error)].concat(tl)
            }, error)
            : hd
        };
  var peg$f213 = function(operator, factor) { return tree.leaf(tree.FACTOR, { operator, value:factor }, error) };
  var peg$f214 = function(f) { return tree.leaf(tree.NOT, { value:f }, error) };
  var peg$f215 = function(hd, a) { return a };
  var peg$f216 = function(hd, tl) {
        if (tl.length > 0)
            return tree.leaf(tree.COMPOSE, { functions: [hd].concat(tl) }, error)
        else
            return hd
    };
  var peg$f217 = function(base, p) { return p };
  var peg$f218 = function(base, power) {
        return power
            ? tree.leaf(tree.EXPONENTIATION, { base, power }, error)
            : base
        };
  var peg$f219 = function(value) { return tree.leaf(tree.MUTABLE_PARAM, { value }, error) };
  var peg$f220 = function(list, i) { return i };
  var peg$f221 = function(list, index) {
        return index
            ? tree.leaf(tree.INDEXING, { list, index }, error)
            : list
        };
  var peg$f222 = function(tag, v) { return v };
  var peg$f223 = function(tag, value) { return tree.leaf(tree.TAGGED_VALUE, { tag, value: value ?? tree.leaf(tree.VOID_VALUE, {}, error) }, error) };
  var peg$f224 = function() { return tree.leaf(tree.VOID_VALUE, {}, error) };
  var peg$f225 = function() { return tree.leaf(tree.EMPTY_LINKED_LIST, {}, error) };
  var peg$f226 = function() { return tree.leaf(tree.IMPLICIT_PARAM, { name: text() }, error) };
  var peg$f227 = function() { error("Expecting letter for implicit parameter after \"$\"") };
  var peg$f228 = function(hd, v) { return v };
  var peg$f229 = function(hd, tl, close) {
        if (!close) {
            if (tl.length > 0)
                error("Expecting \")\" to close the tuple")
            else
                error("Expecting matching \")\"")
        }
        return tl.length > 0
            ? tree.leaf(tree.TUPLE, { values: [hd].concat(tl) }, error)
            : hd
        };
  var peg$f230 = function(members, close) {
        if (!close) error("Expecting \"|\x7d\" to close the record")
        return tree.leaf(tree.REC_VALUE, { members: members ?? [] }, error)
    };
  var peg$f231 = function(hd, m) { return m };
  var peg$f232 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f233 = function(m) { return m };
  var peg$f234 = function(modifier, name, type, value) { return tree.leaf(tree.REC_FIELD_VALUE, { modifier, name, type, value }, error) };
  var peg$f235 = function(value) { return tree.leaf(tree.SPLAT, { value }, error) };
  var peg$f236 = function(elements, close) {
        if (!close) error("Expecting \"]\" to close the list")
        return tree.leaf(tree.LIST, { values: elements ?? [] }, error)
    };
  var peg$f237 = function(hd, v) { return v };
  var peg$f238 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f239 = function(elements, close) {
        if (!close) error("Expecting \"\x7d\" to close the set")
        return tree.leaf(tree.SET, { values: elements ?? [] }, error)
    };
  var peg$f240 = function(hd, v) { return v };
  var peg$f241 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f242 = function(elements, close) {
        if (!close) error("Expecting \"\x7d\" to close the dictionary")
        return tree.leaf(tree.DICT_VALUE, { elements: elements ?? [] }, error)
    };
  var peg$f243 = function(hd, m) { return m };
  var peg$f244 = function(hd, tl) { return [hd].concat(tl) };
  var peg$f245 = function(key, value) { return tree.leaf(tree.DICT_KEY_VALUE, { key, value }, error) };
  var peg$f246 = function(type, params) { return tree.leaf(tree.CREATE_OBJECT, { type, params }, error) };
  var peg$f247 = function(container, id) { return id };
  var peg$f248 = function(container, path) {
        if (path.length > 0)
            return tree.leaf(tree.GET_MEMBER, { container, path }, error)
        else
            return container
    };
  var peg$f249 = function(id) { return id };
  var peg$f250 = function(path) {
        return tree.leaf(tree.GET_WISE_MEMBER, { path }, error)
    };
  var peg$f251 = function(i) { return i };
  var peg$f252 = function(namespace, name) { return tree.leaf(tree.VALUE_BY_NAME, { name, namespace }, error) };
  var peg$f253 = function() { return tree.leaf(tree.VALUE_BY_NAME, { name: "me", namespace: [] }, error) };
  var peg$f254 = function(op) { return op };
  var peg$f255 = function(i) { return i };
  var peg$f256 = function(namespace, name) { return tree.leaf(tree.TYPE_BY_NAME, { name, namespace }, error) };
  var peg$f257 = function(o) { return o };
  var peg$f258 = function(value) { return tree.leaf(tree.BOOLEAN, { value: value === "yes" }, error) };
  var peg$f259 = function(s) { return s };
  var peg$f260 = function(hd, id) { return id };
  var peg$f261 = function(hd, tl) {
        return ([hd].concat(tl)).map(id => tree.leaf(tree.IDENTIFIER, { name: id }, error)) 
    };
  var peg$f262 = function() { return tree.leaf(tree.INTEGER, { value: BigInt(text()) }, error) };
  var peg$f263 = function(beforePoint, afterPoint, expPart) {
        if (afterPoint || expPart && expPart.includes("-") )
            return tree.leaf(tree.FLOAT, { value: parseFloat(text()) }, error)
        else
        {
            if (expPart)
            {
                const expValue = expPart.substring(1)
                const factor = BigInt(10) ** BigInt(expValue)
                return tree.leaf(tree.INTEGER, { value: BigInt(beforePoint) * factor }, error)
            }
            else
                return tree.leaf(tree.INTEGER, { value: BigInt(text()) }, error)
        }
    };
  var peg$f264 = function(parts) { return tree.leaf(tree.STRING_VALUE, { parts }, error) };
  var peg$f265 = function(chars) { return tree.leaf(tree.STRING_PART, { value: chars.join("") }, error) };
  var peg$f266 = function(value) { return tree.leaf(tree.FORMATTED_VALUE, { value }, error) };
  var peg$f267 = function() { return "\x7b" };
  var peg$f268 = function() { return "\x7d" };
  var peg$f269 = function() { return "\"" };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsemodule() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsemoduleStatements();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemoduleStatements() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemoduleStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsestatementSeparator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemoduleStatement();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f1(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsestatementSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemoduleStatement();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f1(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f3();
      s0 = s1;
    }

    return s0;
  }

  function peg$parsestatement() {
    var s0;

    s0 = peg$parsedefs();
    if (s0 === peg$FAILED) {
      s0 = peg$parsejs();
      if (s0 === peg$FAILED) {
        s0 = peg$parsevars();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetypeDefs();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefun();
            if (s0 === peg$FAILED) {
              s0 = peg$parsebranch();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemoduleStatement() {
    var s0;

    s0 = peg$parseuse();
    if (s0 === peg$FAILED) {
      s0 = peg$parsestatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexplicitModuleBlock();
      }
    }

    return s0;
  }

  function peg$parsestatementSeparator() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c0;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f4(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseeol();
    }

    return s0;
  }

  function peg$parseuse() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseid();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c3;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parseid();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f5(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseid();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f5(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f6(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejs() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 96) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r0.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 96) {
          s3 = peg$c4;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f7(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefs() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsedef();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s7 = peg$c6;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parsedef();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f8(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c6;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parsedef();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f8(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f9(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedef() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsenames();
    if (s2 === peg$FAILED) {
      s2 = peg$parsedeconstruct();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseunionType();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s6 = peg$c7;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parsebranch();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10(s2, s4, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevars() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevar();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s7 = peg$c6;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parsevar();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f11(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c6;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parsevar();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f11(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f12(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevar() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsenames();
    if (s1 === peg$FAILED) {
      s1 = peg$parsedeconstruct();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsebranch();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenames();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedeconstruct();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseunionType();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 61) {
            s6 = peg$c7;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parsebranch();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f14(s1, s3, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f15(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenames() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseidentifiers();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedeconstruct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parsedeconstructElement();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c3;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parsedeconstructElement();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f17(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parsedeconstructElement();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f17(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parsedeconstructMember();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parsedeconstructMember();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f19(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c3;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s9 = peg$parsedeconstructMember();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f19(s3, s9);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c12) {
            s6 = peg$c12;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f20(s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedeconstructMember() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parsecolon();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsedeconstructElement();
        if (s6 === peg$FAILED) {
          s6 = peg$parsedeconstruct();
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f21(s1, s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f22(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeconstructElement() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsedeconstruct();
    }

    return s0;
  }

  function peg$parsetypeDefs() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsetypeDef();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c14) {
        s1 = peg$c14;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsetraitDef();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c15) {
          s1 = peg$c15;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parsealiasDef();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s7 = peg$c6;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s9 = peg$parsealiasDef();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f26(s3, s9);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s7 = peg$c6;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s9 = peg$parsealiasDef();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s5 = peg$f26(s3, s9);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            peg$savedPos = s0;
            s0 = peg$f27(s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsetraitDef() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsetraitConstraints();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseid();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c9;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseoverridableOp();
          if (s7 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s8 = peg$c10;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s8 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f28(s1, s3, s7);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 123) {
          s6 = peg$c16;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parsefeatures();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 125) {
              s10 = peg$c17;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f29(s1, s3, s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetraitConstraints() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseleftAngleBracket();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsetraitConstraint();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c3;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parsetraitConstraint();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f30(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parsetraitConstraint();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f30(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        s6 = peg$parserightAngleBracket();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f31(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f32();
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetraitConstraint() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseunionType();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f33(s1, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f34(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefeatures() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsefeature();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c3;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parseeol();
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefeature();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f35(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$parseeol();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefeature();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f35(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f36(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefeature() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsefunHeader();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsepropHeader();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f38(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsetraitInheritance();
      }
    }

    return s0;
  }

  function peg$parsetraitInheritance() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetypeByName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f39(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypeDef() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetraitConstraints();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsetypeId();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseunionType();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f40(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealiasDef() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsegenericParams();
    s2 = peg$parse_();
    s3 = peg$parsetypeId();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s5 = peg$c7;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseunionType();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f41(s1, s3, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegenericParams() {
    var s0, s1, s2, s3, s4;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parsetypeId();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 45) {
        s4 = peg$c19;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f42(s2);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parsetypeId();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 45) {
          s4 = peg$c19;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s1 = peg$f42(s2);
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexplicitModuleBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c20) {
      s1 = peg$c20;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeffects();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse__();
      s4 = peg$parsemoduleStatements();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsewhen();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse__();
        if (input.substr(peg$currPos, 3) === peg$c21) {
          s8 = peg$c21;
          peg$currPos += 3;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhen() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseeol();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsepipe();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecaseBody();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefun() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsefunHeader();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsefunBody();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f45(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunHeader() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parseisGlobal();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseisAsync();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepurity();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefunKind();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parsetraitConstraints();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parsefunParam();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 34) {
                  s10 = peg$c23;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e24); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$currPos;
                  s12 = peg$parsekeyword();
                  if (s12 === peg$FAILED) {
                    s12 = null;
                  }
                  s11 = input.substring(s11, peg$currPos);
                  s12 = peg$parseid();
                  if (s12 === peg$FAILED) {
                    s12 = peg$parseoverridableOp();
                  }
                  if (s12 === peg$FAILED) {
                    s12 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s13 = peg$c23;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e24); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$currPos;
                    s15 = peg$parse__();
                    s16 = peg$parseparams();
                    if (s16 !== peg$FAILED) {
                      peg$savedPos = s14;
                      s14 = peg$f46(s1, s2, s3, s4, s6, s8, s11, s12, s16);
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                    if (s14 === peg$FAILED) {
                      s14 = null;
                    }
                    s15 = peg$currPos;
                    s16 = peg$parse__();
                    if (input.substr(peg$currPos, 2) === peg$c24) {
                      s17 = peg$c24;
                      peg$currPos += 2;
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e25); }
                    }
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse__();
                      s19 = peg$parseunionType();
                      if (s19 !== peg$FAILED) {
                        peg$savedPos = s15;
                        s15 = peg$f47(s1, s2, s3, s4, s6, s8, s11, s12, s14, s19);
                      } else {
                        peg$currPos = s15;
                        s15 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s15;
                      s15 = peg$FAILED;
                    }
                    if (s15 === peg$FAILED) {
                      s15 = null;
                    }
                    s16 = peg$currPos;
                    s17 = peg$parse__();
                    if (input.substr(peg$currPos, 4) === peg$c25) {
                      s18 = peg$c25;
                      peg$currPos += 4;
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e26); }
                    }
                    if (s18 !== peg$FAILED) {
                      s19 = peg$parse_();
                      s20 = peg$parseidentifiers();
                      if (s20 !== peg$FAILED) {
                        peg$savedPos = s16;
                        s16 = peg$f48(s1, s2, s3, s4, s6, s8, s11, s12, s14, s15, s20);
                      } else {
                        peg$currPos = s16;
                        s16 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s16;
                      s16 = peg$FAILED;
                    }
                    if (s16 === peg$FAILED) {
                      s16 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f49(s1, s2, s3, s4, s6, s8, s11, s12, s14, s15, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseisGlobal() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f50();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f51();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseisAsync() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f52();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f53();
      s0 = s1;
    }

    return s0;
  }

  function peg$parsefunParam() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c28) {
      s2 = peg$c28;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseidentifiers();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseunionType();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f54(s1, s2, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f55(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsevoidType();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f56();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseparams() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsefunParam();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s5 = peg$c6;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsefunParam();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f57(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s5 = peg$c6;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsefunParam();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f57(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f58(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunKind() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c29) {
      s0 = peg$c29;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c30) {
        s0 = peg$c30;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c31) {
          s0 = peg$c31;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
      }
    }

    return s0;
  }

  function peg$parsepurity() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f59(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f60();
      s0 = s1;
    }

    return s0;
  }

  function peg$parsefunBody() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 2) === peg$c33) {
      s2 = peg$c33;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsebranch();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f61(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c33) {
        s2 = peg$c33;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 63) {
          s4 = peg$c34;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f62();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$parseexplicitFunBlock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsecase();
        }
      }
    }

    return s0;
  }

  function peg$parseexplicitFunBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c20) {
      s1 = peg$c20;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeffects();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse__();
      s4 = peg$parsefunStatements();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsewhen();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse__();
        if (input.substr(peg$currPos, 3) === peg$c21) {
          s8 = peg$c21;
          peg$currPos += 3;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunStatements() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefunStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsestatementSeparator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefunStatement();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f65(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsestatementSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefunStatement();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f65(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f66(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f67();
      s0 = s1;
    }

    return s0;
  }

  function peg$parsefunStatement() {
    var s0;

    s0 = peg$parsestatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexplicitFunBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturn();
      }
    }

    return s0;
  }

  function peg$parsereturn() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsebranch();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f68(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c37) {
          s3 = peg$c37;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parsebranch();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f69(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c36) {
          s1 = peg$c36;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parsebranch();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f70(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c38) {
            s1 = peg$c38;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f71();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c39) {
              s1 = peg$c39;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e40); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f72();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c40) {
                s1 = peg$c40;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e41); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f73();
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebranch() {
    var s0;

    s0 = peg$parseoptionWithPipe();
    if (s0 === peg$FAILED) {
      s0 = peg$parseloop();
    }

    return s0;
  }

  function peg$parseloop() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsedefault();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseloopBody();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f74(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c42) {
        s1 = peg$c42;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseloopBody();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f75(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseloopBody() {
    var s0;

    s0 = peg$parsebranch();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinlineBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturn();
      }
    }

    return s0;
  }

  function peg$parseoptionWithPipe() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsepipedExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseternary();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecase();
        if (s2 === peg$FAILED) {
          s2 = peg$parsewiseBlock();
          if (s2 === peg$FAILED) {
            s2 = peg$parsefor();
          }
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f76(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c43) {
      s2 = peg$c43;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 64) {
        s4 = peg$c44;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseid();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseloopBody();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f77(s6, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c43) {
        s2 = peg$c43;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecase();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f78(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoptionNoPipe() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedefault();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseternary();
      if (s2 === peg$FAILED) {
        s2 = peg$parsewiseBlock();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f79(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoptionNoCase() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsepipedExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseternary();
      if (s2 === peg$FAILED) {
        s2 = peg$parsewiseBlock();
        if (s2 === peg$FAILED) {
          s2 = peg$parsefor();
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f80(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoptionalTernary() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsepipedExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseternary();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f81(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewiseBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c45) {
      s2 = peg$c45;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 123) {
        s4 = peg$c16;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsefunStatements();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s8 = peg$c17;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f82(s6, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseternary() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.charCodeAt(peg$currPos) === 63) {
      s2 = peg$c34;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsebranch();
      if (s4 === peg$FAILED) {
        s4 = peg$parseinlineBlock();
        if (s4 === peg$FAILED) {
          s4 = peg$parsereturn();
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parse__();
        if (input.substr(peg$currPos, 4) === peg$c46) {
          s7 = peg$c46;
          peg$currPos += 4;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parsebranch();
          if (s9 === peg$FAILED) {
            s9 = peg$parseinlineBlock();
            if (s9 === peg$FAILED) {
              s9 = peg$parsereturn();
            }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f83(s4, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f84(s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecase() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$parsepipe();
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseeol();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsepipe();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecaseBody();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f85(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinlineBlock() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      s4 = input.charAt(peg$currPos);
      if (peg$r1.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = input.charAt(peg$currPos);
        if (peg$r2.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s6 = peg$c7;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s4 = peg$c47;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
        }
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c17;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parsefunStatements();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s6 = peg$c17;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f86(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecaseBody() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsecaseOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parsepipe();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsecaseOption();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f87(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parsepipe();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsecaseOption();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f87(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 3) === peg$c48) {
        s5 = peg$c48;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsebranch();
        if (s7 === peg$FAILED) {
          s7 = peg$parseinlineBlock();
          if (s7 === peg$FAILED) {
            s7 = peg$parsereturn();
          }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f88(s1, s2, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f89(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecaseOption() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsepattern();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c3;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsepattern();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f90(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c3;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsepattern();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f90(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c24) {
        s4 = peg$c24;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseoptionNoCase();
        if (s6 === peg$FAILED) {
          s6 = peg$parseinlineBlock();
          if (s6 === peg$FAILED) {
            s6 = peg$parsereturn();
          }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f91(s1, s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepattern() {
    var s0;

    s0 = peg$parsetaggedPattern();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedefault();
    }

    return s0;
  }

  function peg$parsetaggedPattern() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsetag();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parsepattern();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f92(s1, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f93(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parselinkedListPattern();
    }

    return s0;
  }

  function peg$parselinkedListPattern() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseuntaggedPattern();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c49) {
        s4 = peg$c49;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parselinkedListPattern();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f94(s1, s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f95(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseuntaggedPattern() {
    var s0;

    s0 = peg$parsecapture();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomparisonPattern();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetuplePattern();
        if (s0 === peg$FAILED) {
          s0 = peg$parserecPattern();
          if (s0 === peg$FAILED) {
            s0 = peg$parselistPattern();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesetPattern();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedictPattern();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecomparisonPattern() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parserightAngleBracket();
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c50) {
        s1 = peg$c50;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseleftAngleBracket();
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c51) {
            s1 = peg$c51;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c37) {
              s1 = peg$c37;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsesetComparison();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f96(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetuplePattern() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c18) {
        s4 = peg$c18;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse__();
      s4 = peg$parsepattern();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c3;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          s10 = peg$parsepattern();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s6;
            s6 = peg$f97(s2, s4, s10);
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = peg$parsepattern();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s6;
              s6 = peg$f97(s2, s4, s10);
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c18) {
          s8 = peg$c18;
          peg$currPos += 3;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$currPos;
        s8 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s9 = peg$c10;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s9 !== peg$FAILED) {
          s8 = [s8, s9];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f98(s2, s4, s5, s6, s7);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecPattern() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c18) {
        s4 = peg$c18;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s4 = peg$c12;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f99(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parserecMemberPattern();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parserecMemberPattern();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f100(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c3;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s9 = peg$parserecMemberPattern();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f100(s3, s9);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c18) {
            s7 = peg$c18;
            peg$currPos += 3;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$currPos;
          s7 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c12) {
            s8 = peg$c12;
            peg$currPos += 2;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f101(s3, s4, s5, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserecMemberPattern() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsecolon();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parsepattern();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f102(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistPattern() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c52;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c18) {
        s4 = peg$c18;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.charCodeAt(peg$currPos) === 93) {
        s4 = peg$c53;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f103(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c52;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c18) {
          s4 = peg$c18;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parse_();
        s4 = peg$parsepattern();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = peg$parsepattern();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s6;
              s6 = peg$f104(s2, s4, s10);
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c3;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              s10 = peg$parsepattern();
              if (s10 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f104(s2, s4, s10);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c18) {
            s8 = peg$c18;
            peg$currPos += 3;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$currPos;
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 93) {
            s9 = peg$c53;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f105(s2, s4, s5, s6, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesetPattern() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c16;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c18) {
          s6 = peg$c18;
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c17;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f106(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c54) {
        s1 = peg$c54;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parsepattern();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse__();
              s11 = peg$parsepattern();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f107(s5, s11);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c3;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                s11 = peg$parsepattern();
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s7 = peg$f107(s5, s11);
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            s7 = peg$parse__();
            s8 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c18) {
              s9 = peg$c18;
              peg$currPos += 3;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e19); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s9 = [s9, s10];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            if (input.charCodeAt(peg$currPos) === 125) {
              s9 = peg$c17;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f108(s5, s6, s8, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedictPattern() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c16;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c18) {
          s6 = peg$c18;
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c17;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f109(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c55) {
        s1 = peg$c55;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parsedictKeyPattern();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c3;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              s10 = peg$parsedictKeyPattern();
              if (s10 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f110(s5, s10);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              s8 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c18) {
                s9 = peg$c18;
                peg$currPos += 3;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e19); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s9 = peg$c17;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f111(s5, s6, s8, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedictKeyPattern() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsedefault();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c24) {
        s3 = peg$c24;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parsepattern();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f112(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecapture() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c44;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseid();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsetupleType();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f113(s2, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f114(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 95) {
        s1 = peg$c56;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f115(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseunionType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsefunctionType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsepipe();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsefunctionType();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f116(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsepipe();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsefunctionType();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f116(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f117(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseisAsync();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepurity();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefunKind();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefunctionTypeParams();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f118(s1, s2, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsevoidTypeOrNot();
    }

    return s0;
  }

  function peg$parsefunctionTypeParams() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parseunionType();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c24) {
          s8 = peg$c24;
          peg$currPos += 2;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          s10 = peg$parseunionType();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s6;
            s6 = peg$f119(s4, s10);
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c24) {
            s8 = peg$c24;
            peg$currPos += 2;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = peg$parseunionType();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s6;
              s6 = peg$f119(s4, s10);
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s7 = peg$c10;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f120(s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevoidTypeOrNot() {
    var s0;

    s0 = peg$parsevoidType();
    if (s0 === peg$FAILED) {
      s0 = peg$parseconcatType();
    }

    return s0;
  }

  function peg$parseconcatType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetupleType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseconcatOp();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsetupleType();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseconcatOp();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsetupleType();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f121(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetupleType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetuplePowerType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 42) {
        s5 = peg$c57;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsetuplePowerType();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f122(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c57;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsetuplePowerType();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f122(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f123(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetuplePowerType() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseoptionType();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parsepowerOp();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseinteger();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f124(s1, s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f125(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoptionType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsetraitIntersection();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 63) {
        s2 = peg$c34;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f126(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetraitIntersection() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsespecializeType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 38) {
        s5 = peg$c58;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsespecializeType();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f127(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 38) {
          s5 = peg$c58;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsespecializeType();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f127(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f128(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespecializeType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parselinkedListType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 45) {
        s5 = peg$c19;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parselinkedListType();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f129(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 45) {
          s5 = peg$c19;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parselinkedListType();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f129(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f130(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselinkedListType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseatomicType();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c59) {
        s4 = peg$c59;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f131(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseatomicType() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parseanyType();
    if (s0 === peg$FAILED) {
      s0 = peg$parselistType();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesetType();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedictType();
          if (s0 === peg$FAILED) {
            s0 = peg$parserecType();
            if (s0 === peg$FAILED) {
              s0 = peg$parsevoidType();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetypeByName();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c9;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e10); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    s3 = peg$parseunionType();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s5 = peg$c10;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e11); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f132(s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 35) {
                      s1 = peg$c60;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e63); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f133();
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselistType() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c52;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseunionType();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c53;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f134(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c16;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseunionType();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s7 = peg$c17;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f135(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedictType() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c16;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parsetupleType();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c24) {
            s7 = peg$c24;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parsetupleType();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 125) {
                s11 = peg$c17;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f136(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecType() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parserecMemberType();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c3;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = peg$parseeol();
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parserecMemberType();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f137(s3, s7);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = peg$parseeol();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parserecMemberType();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f137(s3, s7);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$currPos;
        s6 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s7 = peg$c12;
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f138(s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecMemberType() {
    var s0;

    s0 = peg$parserecInheritance();
    if (s0 === peg$FAILED) {
      s0 = peg$parserecFieldType();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepropDef();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefun();
          if (s0 === peg$FAILED) {
            s0 = peg$parseconstructor();
          }
        }
      }
    }

    return s0;
  }

  function peg$parserecInheritance() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespecializeType();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f139(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecFieldType() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parserecFieldTypeModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$parseidentifiers();
    if (s4 !== peg$FAILED) {
      peg$savedPos = s2;
      s2 = peg$f140(s1, s4);
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseunionType();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f141(s1, s2, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s6 = peg$c61;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = peg$parsedefault();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f142(s1, s2, s3, s8);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f143(s1, s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseidentifiers();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parsedefault();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f144(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserecFieldTypeModifier() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c63) {
      s0 = peg$c63;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c64) {
        s0 = peg$c64;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c8) {
          s0 = peg$c8;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
      }
    }

    return s0;
  }

  function peg$parsepropDef() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsepropHeader();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsegetterBody();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesetter();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f145(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepropHeader() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c32) {
      s2 = peg$c32;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s1;
      s1 = peg$f146(s2);
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 4) === peg$c65) {
      s2 = peg$c65;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseid();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseunionType();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f147(s1, s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetter() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 3) === peg$c54) {
      s2 = peg$c54;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parselambda();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f148(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegetterBody() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 2) === peg$c33) {
      s2 = peg$c33;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsebranch();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f149(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c16;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parsefunStatements();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s6 = peg$c17;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f150(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselambda() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseisAsync();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepurity();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c30) {
          s4 = peg$c30;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s3;
          s3 = peg$f151(s1, s2, s4);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s4 = peg$c33;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$parseoptionNoPipe();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f152(s1, s2, s3, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseisAsync();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepurity();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c30) {
            s3 = peg$c30;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parsecolon();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parsetraitConstraints();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseparams();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s9 = peg$currPos;
                s10 = peg$parsecolon();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  s12 = peg$parseunionType();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parse__();
                    peg$savedPos = s9;
                    s9 = peg$f153(s1, s2, s3, s5, s7, s12);
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                s10 = peg$parselambdaBody();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f154(s1, s2, s3, s5, s7, s9, s10);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseisAsync();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepurity();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c31) {
              s3 = peg$c31;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              s5 = peg$currPos;
              s6 = peg$parsecolon();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                s8 = peg$parseunionType();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  peg$savedPos = s5;
                  s5 = peg$f155(s1, s2, s8);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parselambdaBody();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f156(s1, s2, s5, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parselambdaBody() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseoptionNoPipe();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f157(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parsefunStatements();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s5 = peg$c17;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f158(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecase();
      }
    }

    return s0;
  }

  function peg$parseconstructor() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseisAsync();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c66) {
        s2 = peg$c66;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsepipe();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseunionType();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f159(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseconstructorBody();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f160(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconstructorBody() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsefunStatements();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsewhen();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse__();
      if (input.substr(peg$currPos, 3) === peg$c21) {
        s6 = peg$c21;
        peg$currPos += 3;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f161(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevoidType() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsevoid();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f162();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseanyType() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f163();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepipedExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsedefault();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 92) {
        s5 = peg$c68;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseappendCall();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f164(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 92) {
          s5 = peg$c68;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseappendCall();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f164(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f165(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefault() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsedisjunction();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c69) {
        s5 = peg$c69;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsedisjunction();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f166(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c69) {
          s5 = peg$c69;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsedisjunction();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f166(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f167(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedisjunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsexor();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c70) {
        s5 = peg$c70;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsexor();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f168(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c70) {
          s5 = peg$c70;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsexor();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f168(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f169(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsexor() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseconjunction();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 3) === peg$c71) {
        s5 = peg$c71;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseconjunction();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f170(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 3) === peg$c71) {
          s5 = peg$c71;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e74); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseconjunction();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f170(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f171(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconjunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsecomparison();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 38) {
        s5 = peg$c58;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s7 = peg$c7;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parsecomparison();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f172(s1, s8);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 38) {
          s5 = peg$c58;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = undefined;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            s8 = peg$parsecomparison();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f172(s1, s8);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f173(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomparison() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesetComparison();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseotherComparisonOperand();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseotherComparisonOperand();
      }
      peg$savedPos = s0;
      s0 = peg$f174(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseotherComparisonOperand() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsecomparisonOp();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsesetComparison();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f175(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetComparison() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parselinkedList();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseotherSetComparisonOperand();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseotherSetComparisonOperand();
      }
      peg$savedPos = s0;
      s0 = peg$f176(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseotherSetComparisonOperand() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsesetComparisonOp();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parselinkedList();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f177(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselinkedList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsemodifyRec();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c49) {
        s4 = peg$c49;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parselinkedList();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f178(s1, s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f179(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemodifyRec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseconcat();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c72) {
        s4 = peg$c72;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsemodifyMember();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$currPos;
          s9 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c72) {
            s10 = peg$c72;
            peg$currPos += 2;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e75); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parsemodifyMember();
            if (s11 !== peg$FAILED) {
              peg$savedPos = s8;
              s8 = peg$f180(s1, s6, s11);
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$currPos;
            s9 = peg$parse__();
            if (input.substr(peg$currPos, 2) === peg$c72) {
              s10 = peg$c72;
              peg$currPos += 2;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e75); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parsemodifyMember();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s8;
                s8 = peg$f180(s1, s6, s11);
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          }
          peg$savedPos = s2;
          s2 = peg$f181(s1, s6, s7);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f182(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemodifyMember() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsecolon();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parsedefault();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f183(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c73;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseid();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f184(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseconcat() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseaddition();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseconcatOp();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseaddition();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f185(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseconcatOp();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseaddition();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f185(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f186(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaddition() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsefirstTerm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseotherTerm();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseotherTerm();
      }
      peg$savedPos = s0;
      s0 = peg$f187(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefirstTerm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseadditiveOp();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parsecall();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f188(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseotherTerm() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseadditiveOp();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsecall();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f189(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecall() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenestedCall();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f190(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenestedCall() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsesetDiff();
    if (s1 === peg$FAILED) {
      s1 = peg$parsecurryParam();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseappendCall();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f191(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeffects() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c25) {
      s2 = peg$c25;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsedefault();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c3;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          s10 = peg$parsedefault();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s6;
            s6 = peg$f192(s4, s10);
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = peg$parsedefault();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s6;
              s6 = peg$f192(s4, s10);
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f193(s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseappendCall() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsemultiplication();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 5) === peg$c74) {
        s5 = peg$c74;
        peg$currPos += 5;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      s6 = peg$parseeffects();
      if (s6 !== peg$FAILED) {
        peg$savedPos = s4;
        s4 = peg$f194(s2, s3, s6);
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parserightParams();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f195(s2, s3, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserightParams() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsenestedCall();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s6 = peg$c6;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = peg$parsenestedCall();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f196(s2, s8);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s6 = peg$c6;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parsenestedCall();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f196(s2, s8);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f197(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecurryParam() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c56;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f198();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetDiff() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsesetUnion();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 3) === peg$c75) {
        s5 = peg$c75;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsesetUnion();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f199(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 3) === peg$c75) {
          s5 = peg$c75;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsesetUnion();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f199(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f200(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetUnion() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsesetInter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 3) === peg$c76) {
        s5 = peg$c76;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e80); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsesetInter();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f201(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 3) === peg$c76) {
          s5 = peg$c76;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsesetInter();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f201(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f202(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetInter() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsecartesianProd();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 3) === peg$c77) {
        s5 = peg$c77;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsecartesianProd();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f203(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 3) === peg$c77) {
          s5 = peg$c77;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsecartesianProd();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f203(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f204(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecartesianProd() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parserange();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 3) === peg$c78) {
        s5 = peg$c78;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e82); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parserange();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f205(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 3) === peg$c78) {
          s5 = peg$c78;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e82); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parserange();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f205(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f206(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecartesianPower() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parserange();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c79) {
        s5 = peg$c79;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parserange();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f207(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c79) {
          s5 = peg$c79;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parserange();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f207(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f208(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserange() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsemultiplication();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserangeSuffix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f209(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserangeSuffix() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parserangeOp();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsemultiplication();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c80) {
          s7 = peg$c80;
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parsemultiplication();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f210(s2, s4, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f211(s2, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemultiplication() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsefactor();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseotherFactor();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseotherFactor();
      }
      peg$savedPos = s0;
      s0 = peg$f212(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseotherFactor() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsemultiplicativeOp();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsefactor();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f213(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefactor() {
    var s0;

    s0 = peg$parsenot();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecompose();
    }

    return s0;
  }

  function peg$parsenot() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsenotOp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefactor();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f214(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecompose() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexponentiation();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsecomposeOp();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseexponentiation();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f215(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsecomposeOp();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseexponentiation();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f215(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f216(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexponentiation() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsemutValue();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parsepowerOp();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsemutValue();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f217(s1, s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f218(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemutValue() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseindexing();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f219(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseindexing();
    }

    return s0;
  }

  function peg$parseindexing() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsetaggedAtom();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 91) {
        s4 = peg$c52;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsebranch();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 93) {
            s8 = peg$c53;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f220(s1, s6);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f221(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetaggedAtom() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsetag();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      s4 = peg$parsetaggedAtom();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f222(s1, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f223(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseatom();
    }

    return s0;
  }

  function peg$parseatom() {
    var s0;

    s0 = peg$parsetuple();
    if (s0 === peg$FAILED) {
      s0 = peg$parserecValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parselist();
        if (s0 === peg$FAILED) {
          s0 = peg$parseset();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedictValue();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefloat();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestring();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsenewObject();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsegetMember();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parselambda();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsevoidValue();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseboolean();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevoidValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsevoid();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f224();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f225();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseimplicitParam() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r4.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f226();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c81;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e85); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f227();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetuple() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parsebranch();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c3;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parsebranch();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f228(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parsebranch();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f228(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f229(s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecValue() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parserecMembers();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s6 = peg$c12;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f230(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecMembers() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parserecMemberValue();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c3;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s6 = [s6, s7];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = peg$parseeol();
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parserecMemberValue();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f231(s1, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseeol();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parserecMemberValue();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f231(s1, s6);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f232(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecMemberValue() {
    var s0;

    s0 = peg$parserecMemberFieldValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepropDef();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefun();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesplat();
        }
      }
    }

    return s0;
  }

  function peg$parserecMemberFieldValue() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parserecMemberFieldValueModifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s1;
      s1 = peg$f233(s2);
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseid();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseunionType();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parsecolon();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = peg$parsebranch();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f234(s1, s2, s4, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecMemberFieldValueModifier() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c63) {
      s0 = peg$c63;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c8) {
        s0 = peg$c8;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
    }

    return s0;
  }

  function peg$parsesplat() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalueByName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f235(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselist() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c52;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parselistElements();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c53;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f236(s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistElements() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsesplat();
    if (s2 === peg$FAILED) {
      s2 = peg$parsebranch();
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c3;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = peg$parsesplat();
        if (s8 === peg$FAILED) {
          s8 = peg$parsebranch();
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f237(s2, s8);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parsesplat();
          if (s8 === peg$FAILED) {
            s8 = peg$parsebranch();
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f237(s2, s8);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse__();
      peg$savedPos = s0;
      s0 = peg$f238(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseset() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c16;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsesetElements();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s8 = peg$c17;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f239(s5, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetElements() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsesplat();
    if (s2 === peg$FAILED) {
      s2 = peg$parsebranch();
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c3;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = peg$parsesplat();
        if (s8 === peg$FAILED) {
          s8 = peg$parsebranch();
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f240(s2, s8);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parsesplat();
          if (s8 === peg$FAILED) {
            s8 = peg$parsebranch();
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f240(s2, s8);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse__();
      peg$savedPos = s0;
      s0 = peg$f241(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedictValue() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c16;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsedictElements();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c17;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f242(s5, s7);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedictElements() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsedictKeyValue();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c3;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = peg$parsedictKeyValue();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f243(s2, s8);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parsedictKeyValue();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f243(s2, s8);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse__();
      peg$savedPos = s0;
      s0 = peg$f244(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedictKeyValue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsedefault();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c24) {
        s3 = peg$c24;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parsebranch();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f245(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesplat();
    }

    return s0;
  }

  function peg$parsenewObject() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsespecializeType();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parsetuple();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f246(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegetMember() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsevalueByName();
    if (s1 === peg$FAILED) {
      s1 = peg$parseimplicitParam();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseid();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f247(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c0;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseid();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f247(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f248(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseid();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f249(s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c0;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseid();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s2 = peg$f249(s4);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f250(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsevalueByName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseid();
    if (s3 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c82) {
        s4 = peg$c82;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e87); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f251(s3);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseid();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c82) {
          s4 = peg$c82;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e87); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f251(s3);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = peg$parsevalueId();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f252(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c83) {
        s1 = peg$c83;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f253();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsevalueId() {
    var s0, s1, s2, s3;

    s0 = peg$parseid();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoverridableOp();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f254(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetypeByName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseid();
    if (s3 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c82) {
        s4 = peg$c82;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e87); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f255(s3);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseid();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c82) {
          s4 = peg$c82;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e87); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f255(s3);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = peg$parsetypeId();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f256(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypeId() {
    var s0;

    s0 = peg$parseid();
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c31) {
        s0 = peg$c31;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetraitAlias();
      }
    }

    return s0;
  }

  function peg$parsetraitAlias() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoverridableOp();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f257(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c84) {
      s1 = peg$c84;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c85) {
        s1 = peg$c85;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e90); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f258(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetag() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c60;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespecializeType();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f259(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifiers() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 47) {
        s5 = peg$c86;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseid();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f260(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c86;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e91); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseid();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f260(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f261(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseid() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$parsekeyword();
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 95) {
        s3 = peg$c56;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (peg$r5.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = input.charAt(peg$currPos);
        if (peg$r6.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = input.charAt(peg$currPos);
          if (peg$r6.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e93); }
          }
        }
        s2 = [s2, s3, s4, s5];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r8.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r8.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
      }
      s3 = peg$currPos;
      s4 = input.charAt(peg$currPos);
      if (peg$r9.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e96); }
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s5 = peg$c87;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e97); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = [];
        s7 = input.charAt(peg$currPos);
        if (peg$r7.test(s7)) {
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = input.charAt(peg$currPos);
            if (peg$r7.test(s7)) {
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e94); }
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f262();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefloat() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = input.charAt(peg$currPos);
    if (peg$r7.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r8.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r8.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 !== peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r7.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = input.charAt(peg$currPos);
          if (peg$r8.test(s7)) {
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e95); }
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = input.charAt(peg$currPos);
            if (peg$r8.test(s7)) {
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e95); }
            }
          }
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s2 = input.substring(s2, peg$currPos);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = input.charAt(peg$currPos);
      if (peg$r9.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e96); }
      }
      if (s5 !== peg$FAILED) {
        s6 = input.charAt(peg$currPos);
        if (peg$r10.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e98); }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = [];
        s8 = input.charAt(peg$currPos);
        if (peg$r7.test(s8)) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
        if (s8 !== peg$FAILED) {
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = input.charAt(peg$currPos);
            if (peg$r7.test(s8)) {
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e94); }
            }
          }
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = input.substring(s3, peg$currPos);
      peg$savedPos = s0;
      s0 = peg$f263(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevoid() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c88) {
      s0 = peg$c88;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r11.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r11.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r12.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parsecomment();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r12.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parsecomment();
      }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r13.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r13.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c90) {
        s1 = peg$c90;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c91) {
          s5 = peg$c91;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e106); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c91) {
            s5 = peg$c91;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e105); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e106); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (input.substr(peg$currPos, 2) === peg$c91) {
          s3 = peg$c91;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseeol() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r11.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parsecomment();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r11.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parsecomment();
      }
    }
    if (input.charCodeAt(peg$currPos) === 13) {
      s2 = peg$c92;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.charCodeAt(peg$currPos) === 10) {
      s3 = peg$c93;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      s1 = [s1, s2, s3, s4];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyword() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c8) {
        s1 = peg$c8;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c29) {
          s1 = peg$c29;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c30) {
            s1 = peg$c30;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c28) {
              s1 = peg$c28;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c20) {
                s1 = peg$c20;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e21); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c21) {
                  s1 = peg$c21;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c35) {
                    s1 = peg$c35;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e36); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c36) {
                      s1 = peg$c36;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e37); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c32) {
                        s1 = peg$c32;
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e33); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c66) {
                          s1 = peg$c66;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e69); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c63) {
                            s1 = peg$c63;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e66); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c64) {
                              s1 = peg$c64;
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e67); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c62) {
                                s1 = peg$c62;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e65); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c65) {
                                  s1 = peg$c65;
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c83) {
                                    s1 = peg$c83;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e88); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c25) {
                                      s1 = peg$c25;
                                      peg$currPos += 4;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e26); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 4) === peg$c13) {
                                        s1 = peg$c13;
                                        peg$currPos += 4;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c67) {
                                          s1 = peg$c67;
                                          peg$currPos += 3;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e70); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c31) {
                                            s1 = peg$c31;
                                            peg$currPos += 4;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e32); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 3) === peg$c54) {
                                              s1 = peg$c54;
                                              peg$currPos += 3;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e57); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 4) === peg$c55) {
                                                s1 = peg$c55;
                                                peg$currPos += 4;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e58); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 3) === peg$c84) {
                                                  s1 = peg$c84;
                                                  peg$currPos += 3;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 2) === peg$c85) {
                                                    s1 = peg$c85;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e90); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c14) {
                                                      s1 = peg$c14;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 5) === peg$c15) {
                                                        s1 = peg$c15;
                                                        peg$currPos += 5;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e16); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 4) === peg$c45) {
                                                          s1 = peg$c45;
                                                          peg$currPos += 4;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e46); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 4) === peg$c46) {
                                                            s1 = peg$c46;
                                                            peg$currPos += 4;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e47); }
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 5) === peg$c41) {
                                                              s1 = peg$c41;
                                                              peg$currPos += 5;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e42); }
                                                            }
                                                            if (s1 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 6) === peg$c42) {
                                                                s1 = peg$c42;
                                                                peg$currPos += 6;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e43); }
                                                              }
                                                              if (s1 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4) === peg$c43) {
                                                                  s1 = peg$c43;
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                                                                }
                                                                if (s1 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 4) === peg$c39) {
                                                                    s1 = peg$c39;
                                                                    peg$currPos += 4;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e40); }
                                                                  }
                                                                  if (s1 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 5) === peg$c40) {
                                                                      s1 = peg$c40;
                                                                      peg$currPos += 5;
                                                                    } else {
                                                                      s1 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e41); }
                                                                    }
                                                                    if (s1 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 4) === peg$c22) {
                                                                        s1 = peg$c22;
                                                                        peg$currPos += 4;
                                                                      } else {
                                                                        s1 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e23); }
                                                                      }
                                                                      if (s1 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 6) === peg$c38) {
                                                                          s1 = peg$c38;
                                                                          peg$currPos += 6;
                                                                        } else {
                                                                          s1 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$e39); }
                                                                        }
                                                                        if (s1 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 2) === peg$c37) {
                                                                            s1 = peg$c37;
                                                                            peg$currPos += 2;
                                                                          } else {
                                                                            s1 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$e38); }
                                                                          }
                                                                          if (s1 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 2) === peg$c80) {
                                                                              s1 = peg$c80;
                                                                              peg$currPos += 2;
                                                                            } else {
                                                                              s1 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$e84); }
                                                                            }
                                                                            if (s1 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 2) === peg$c70) {
                                                                                s1 = peg$c70;
                                                                                peg$currPos += 2;
                                                                              } else {
                                                                                s1 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                                                              }
                                                                              if (s1 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 3) === peg$c71) {
                                                                                  s1 = peg$c71;
                                                                                  peg$currPos += 3;
                                                                                } else {
                                                                                  s1 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e74); }
                                                                                }
                                                                                if (s1 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 6) === peg$c26) {
                                                                                    s1 = peg$c26;
                                                                                    peg$currPos += 6;
                                                                                  } else {
                                                                                    s1 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e27); }
                                                                                  }
                                                                                  if (s1 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 5) === peg$c27) {
                                                                                      s1 = peg$c27;
                                                                                      peg$currPos += 5;
                                                                                    } else {
                                                                                      s1 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                                                                    }
                                                                                    if (s1 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 5) === peg$c74) {
                                                                                        s1 = peg$c74;
                                                                                        peg$currPos += 5;
                                                                                      } else {
                                                                                        s1 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e77); }
                                                                                      }
                                                                                      if (s1 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 3) === peg$c2) {
                                                                                          s1 = peg$c2;
                                                                                          peg$currPos += 3;
                                                                                        } else {
                                                                                          s1 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e2); }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolon() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c61;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = input.charAt(peg$currPos);
      if (peg$r14.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepipe() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c94;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 125) {
        s4 = peg$c17;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parselogicOp() {
    var s0, s1, s2, s3, s4;

    if (input.substr(peg$currPos, 2) === peg$c70) {
      s0 = peg$c70;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c71) {
        s0 = peg$c71;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s2 = peg$c58;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c7;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsecomparisonOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s2 = peg$c7;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 62) {
        s4 = peg$c95;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c47) {
        s0 = peg$c47;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parserightAngleBracket();
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c50) {
            s0 = peg$c50;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseleftAngleBracket();
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c51) {
                s0 = peg$c51;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e54); }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c37) {
                  s1 = peg$c37;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e38); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  peg$silentFails++;
                  s3 = input.charAt(peg$currPos);
                  if (peg$r15.test(s3)) {
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e112); }
                  }
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = undefined;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseleftAngleBracket() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s2 = peg$c96;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = input.charAt(peg$currPos);
      if (peg$r16.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parserightAngleBracket() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s2 = peg$c95;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = input.charAt(peg$currPos);
      if (peg$r17.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseconcatOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c97) {
      s2 = peg$c97;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseadditiveOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r10.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = input.charAt(peg$currPos);
      if (peg$r18.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c98) {
          s4 = peg$c98;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e118); }
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsemultiplicativeOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r19.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenotOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s2 = peg$c73;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepowerOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s2 = peg$c99;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsecomposeOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c100) {
      s2 = peg$c100;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsesetComparisonOp() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c101) {
      s0 = peg$c101;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c102) {
        s0 = peg$c102;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e123); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c103) {
          s0 = peg$c103;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e124); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c104) {
            s0 = peg$c104;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c105) {
              s0 = peg$c105;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e126); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c106) {
                s0 = peg$c106;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e127); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesetOp() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c75) {
      s0 = peg$c75;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c76) {
        s0 = peg$c76;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e80); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c77) {
          s0 = peg$c77;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c78) {
            s0 = peg$c78;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e82); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c79) {
              s0 = peg$c79;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e83); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetildeOp() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 126) {
      s0 = peg$c107;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }

    return s0;
  }

  function peg$parserangeOp() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c108) {
      s0 = peg$c108;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c109) {
        s0 = peg$c109;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c110) {
          s0 = peg$c110;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c111) {
            s0 = peg$c111;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e132); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c112) {
              s0 = peg$c112;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e133); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c113) {
                s0 = peg$c113;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e134); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseoverridableOp() {
    var s0;

    s0 = peg$parselogicOp();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomparisonOp();
      if (s0 === peg$FAILED) {
        s0 = peg$parseconcatOp();
        if (s0 === peg$FAILED) {
          s0 = peg$parseadditiveOp();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemultiplicativeOp();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenotOp();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepowerOp();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecomposeOp();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesetComparisonOp();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsesetOp();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parserangeOp();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseliteralPart();
      if (s3 === peg$FAILED) {
        s3 = peg$parseformattedValue();
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseliteralPart();
        if (s3 === peg$FAILED) {
          s3 = peg$parseformattedValue();
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c23;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f264(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseliteralPart() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseliteralChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseliteralChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f265(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseformattedValue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsebranch();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c17;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f266(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseliteralChar() {
    var s0, s1;

    s0 = input.charAt(peg$currPos);
    if (peg$r20.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c114) {
        s1 = peg$c114;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f267();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c115) {
          s1 = peg$c115;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f268();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c116) {
            s1 = peg$c116;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e138); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f269();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "module"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
